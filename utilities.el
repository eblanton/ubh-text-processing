(defun random-ubitname (first last)
  (let ((initial-list "abcdefghijklmnopqrstuvwxyz")
        (maxlen 8)
        (flen (length first))
        (llen (length last))
        (first (s-downcase first))
        (last (s-downcase last))
        (r (/ (random 99999999) 100000000.0)))
    (cond
     ((> r 0.97)
      (concat (substring first 0 1) (substring last 0 1) (format "%d" (random 100))))
     ((> r 0.90)
      (concat (substring first 0 1) (substring last 0 (min maxlen llen)) (format "%d" (random 10))))
     ((> r 0.65)
      (substring last 0 (min maxlen llen)))
     ((> r 0.35)
      (substring (concat (substring first 0 1) last) 0 (min maxlen (+ 1 llen))))
     ((> r 0.10)
      (substring (concat first last) 0 (min maxlen (+ flen llen))))
     (t
      (let* ((index (random (length initial-list)))
             (initial (substring initial-list index (+ index 1))))
        (substring (concat (substring first 0 1) initial last) 0 (min maxlen (+ llen 2))))))))

(defun ubit-for-line ()
  (let* ((name (buffer-substring (line-beginning-position) (line-end-position)))
         (parts (split-string name " "))
         (fname (car parts))
         (lname (cadr parts)))
    (random-ubitname fname lname)))

(defun random-person-number ()
  (format "10%d" (random 1000000)))

(defun elb-presentation-fonts (prefix)
  (interactive "P")
  (let ((height (if prefix 1.2 3.0))
        (weight (if prefix 'light 'medium)))
    (set-face-attribute 'variable-pitch (selected-frame) :height height :weight weight)
    (set-face-attribute 'fixed-pitch (selected-frame) :height 0.9 :weight weight)))

(defun elb-do-present ()
  (interactive)
  (elb-load-fonts)
  (switch-to-buffer "text-processing.org")
  (elb-presentation-fonts nil)
  (call-interactively #'org-present))
